# Log to console
snippet cl
	console.log($1)
# typeof foo === 'thing'
snippet t
	typeof $1 === $2
# Log variable to console
snippet clv
	console.log('$1 is:', $1)
# Create a function variable
snippet fn
	function $1($2) {
		$3
	}
# If statement
# snippet if
# 	if ($1) {
# 		$2
# 	}
# Try Catch
snippet try
	try {
		$1
	} catch (error) {
		$2
	}
# Constant variable assignment
snippet c
	const $1 = $2
# Let variable assignment
snippet l
	let $1 = $2
# C-style for loop
snippet for
	for (let ${1:i} = ${2:0}; ${1:i} < $3; $4) {
		$4
	}
# module.exports
snippet me
	module.exports = $1
# Object.assign
snippet oa
	Object.assign({}, $1)
# R.tap(console.log)
snippet rtcl
	R.tap(console.log)
# describe
snippet describe
	describe('$1', () => {
		$2
	})
# it
snippet it
	it('$1', () => {
		$2
	})
# assert
snippet assert
	assert.$1($2)
# require with `let`
snippet r
	const $1 = require('$1')
# require
snippet req
	const $1 = require('$2')
snippet ap
	Array.prototype.$1
snippet sp
	String.prototype.$1
snippet op
	Object.prototype.$1
snippet ce
	console.error($1)
snippet cw
	console.warn($1)
snippet if
	import $1 from '$2'
snippet af
	($1) => $2
snippet cls
	class $1 {
		constructor($2) {
			$3
		}
	}
snippet tne
	throw new Error($1)
snippet ok
	Object.keys($1)
snippet ov
	Object.values($1)
snippet cv
	console.table($1)
snippet ts
	Object.prototype.toString.call($1)
snippet f
	const $1 = $2 => $3
snippet type
	/** @type {$1} */
snippet ed
	export default $1
snippet wm
	wavematch($1)(
		($2 = $3) => $4
	)
